# src/esclbot/bot.py
from __future__ import annotations
import os, io, asyncio
from typing import Optional

import discord
from discord import app_commands
from discord.ext import commands
from dotenv import load_dotenv
import pandas as pd

from .api_scraper import (
    collect_csv_from_parent_url,
    get_scrim_name,
    parse_scrim_group_from_url,
)

# ===== Boot =====
load_dotenv()

INTENTS = discord.Intents.default()
INTENTS.message_content = False
BOT = commands.Bot(command_prefix="!", intents=INTENTS)

# GUILD 指定（ギルド限定コマンド用）
GUILD_ID_STR = os.getenv("GUILD_ID")
GUILD_OBJ = discord.Object(id=int(GUILD_ID_STR)) if (GUILD_ID_STR and GUILD_ID_STR.isdigit()) else None

def _df_to_discord_file(df: pd.DataFrame, filename: str) -> discord.File:
    buf = io.StringIO()
    df.to_csv(buf, index=False)
    data = io.BytesIO(buf.getvalue().encode("utf-8"))
    return discord.File(data, filename=filename)

def _safe_name(s: str) -> str:
    return "".join(c for c in s if c not in r'\/:*?"<>|').strip()

# ===== Commands (ギルド限定) =====
@BOT.tree.command(name="escl_from_parent_csv", description="グループURL1本からAPI直叩きで6試合CSVを生成")
@app_commands.describe(parent_url="グループページURL（/scrims/<scrim>/<group>）", group="例: G5, G8 など（任意）")
async def escl_from_parent_csv(inter: discord.Interaction, parent_url: str, group: Optional[str] = None):
    await inter.response.defer(thinking=True, ephemeral=False)
    try:
        df_all = await asyncio.to_thread(collect_csv_from_parent_url, parent_url, (group or ""), 6)
    except Exception as e:
        await inter.followup.send(f"取得に失敗しました: {e}")
        return

    scrim_uuid, group_uuid = parse_scrim_group_from_url(parent_url)
    scrim_name = get_scrim_name(scrim_uuid, group_uuid) or "ESCL_Scrim"
    title = f"{_safe_name(scrim_name)}_{_safe_name(group or '')}".rstrip("_")
    fname = f"{title}.csv"

    await inter.followup.send(
        content="API直叩きでCSVを生成しました。",
        file=_df_to_discord_file(df_all, fname),
    )

@BOT.tree.command(name="escl_from_parent_xlsx", description="グループURL1本からAPI直叩きで6試合Excelを生成（試合ごとシート＋ALL）")
@app_commands.describe(parent_url="グループページURL（/scrims/<scrim>/<group>）", group="例: G5, G8 など（任意）")
async def escl_from_parent_xlsx(inter: discord.Interaction, parent_url: str, group: Optional[str] = None):
    await inter.response.defer(thinking=True, ephemeral=False)
    try:
        df_all = await asyncio.to_thread(collect_csv_from_parent_url, parent_url, (group or ""), 6)
    except Exception as e:
        await inter.followup.send(f"取得に失敗しました: {e}")
        return

    mem = io.BytesIO()
    with pd.ExcelWriter(mem, engine="xlsxwriter") as writer:
        for g in sorted(set(df_all["game"].dropna().astype(int))):
            dfg = df_all[df_all["game"] == g]
            dfg.to_excel(writer, sheet_name=f"GAME{g}", index=False)
        df_all.to_excel(writer, sheet_name="ALL_GAMES", index=False)
    mem.seek(0)

    scrim_uuid, group_uuid = parse_scrim_group_from_url(parent_url)
    scrim_name = get_scrim_name(scrim_uuid, group_uuid) or "ESCL_Scrim"
    title = f"{_safe_name(scrim_name)}_{_safe_name(group or '')}".rstrip("_")
    fname = f"{title}.xlsx"

    await inter.followup.send(
        content="API直叩きでExcelを生成しました。（各試合シート＋ALL_GAMES）",
        file=discord.File(fp=mem, filename=fname),
    )

# ===== Sync & Run =====
@BOT.event
async def on_ready():
    # 1) まずグローバル側を空で同期して"消す"
    BOT.tree.clear_commands(guild=None)
    await BOT.tree.sync(guild=None)
    print("Global commands cleared.")

    # 2) ギルド限定コマンドのみ同期
    if GUILD_OBJ is not None:
        cmds = await BOT.tree.sync(guild=GUILD_OBJ)
        print(f"Guild sync -> {GUILD_OBJ.id}, count={len(cmds)}")
    else:
        # GUILD_ID 未設定時の保険（本来は設定推奨）
        cmds = await BOT.tree.sync()
        print(f"Global sync (no GUILD_ID). count={len(cmds)}")

    print(f"Loaded(local): {[c.name for c in BOT.tree.get_commands()]}")

def main():
    token = os.getenv("DISCORD_TOKEN")
    if not token:
        raise SystemExit("DISCORD_TOKEN が設定されていません（.env を確認）")
    BOT.run(token)

if __name__ == "__main__":
    main()
